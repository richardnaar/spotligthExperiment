<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'refreshRate': &quot;['60', '120']&quot;}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="spotlight" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="deg" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1200]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[-1,-1,-1]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Müller_et_al_2003" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="presentStim">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="frameCount = 0;&amp;#10;responseGiven = false;&amp;#10;targetPair = false;&amp;#10;nrOfEntries = 0;&amp;#10;cond = [(pos2attLeft - 1), (pos2attRight - 1)];&amp;#10;counter = 0;&amp;#10;opacities = [0, 0, 0, 0];&amp;#10;imList = [image_a, image_b, image_c, image_d];&amp;#10;for (var im, _pj_c = 0, _pj_a = imList, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    im = _pj_a[_pj_c];&amp;#10;    im.opacity = 1;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# switchTime = 0&amp;#10;frameCount = 0&amp;#10;responseGiven = False&amp;#10;targetPair = False&amp;#10;nrOfEntries = 0&amp;#10;cond = [pos2attLeft-1, pos2attRight-1]&amp;#10;counter = 0&amp;#10;opacities = [0,0,0,0]&amp;#10;# List of components&amp;#10;imList = [image_a, image_b, image_c, image_d]&amp;#10;&amp;#10;# Make all the symbols visible&amp;#10;for im in imList:&amp;#10;    im.opacity = 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="rects.draw() # Present place the boxes&amp;#10;&amp;#10;# List of default opacities, this will be written over for one frame by checkOpaStatus if necessary&amp;#10;# This is just to keep the duration of &quot;on frame&quot; ~ 1000/60 ms (1000/60.8 in origina)&amp;#10;if sum(opacities) and frameConst-counter &lt;= 1: # frameConst == 1 on 60 Hz &amp;#10;    opacities = [0,0,0,0]&amp;#10;    counter = 0&amp;#10;else:&amp;#10;    counter += 1&amp;#10;# Sync at 533.3(3) ms after the start &amp;#10;frameNow = startFrame + frameN &amp;#10;# Change the opacity based cycle duration in frames&amp;#10;opacities = checkOpaStatus(opacities, flipAfterEvery, frameNow) # fAE == [4, 7, 3, 5] by default&amp;#10;# Change the opacity of the boxes based on checkOpaStatus()&amp;#10;if t &lt;= stimDur-waitRespTime:&amp;#10;    rects.opacities = opacities&amp;#10;else: # If the presentation is over set back to 1&amp;#10;    rects.opacities = 1&amp;#10;&amp;#10;# Change symbol after every 183.3(3) ms&amp;#10;if frameN % symShowFrames == 0: # symShowFrames == 11 frames (on 60 Hz)&amp;#10;    # Take random images from the set&amp;#10;    imCount = 0&amp;#10;    for im in imList:&amp;#10;        im.image = imageArray[randImage[imCount]] # randImage == [0,1,2,3,4,4,4,4] &amp;#10;        imCount += 1&amp;#10;    # If the target is in both of the target locations then&amp;#10;    if 'target' in imageArray[randImage[cond[0]]] and 'target' in imageArray[randImage[cond[1]]]:&amp;#10;        # If its first pair in the trial or wait time has exceeded&amp;#10;        if frameN-frameCount &gt;= waitNextPairFrames or not nrOfEntries:&amp;#10;            # If last set included target pair and no resp was recorded&amp;#10;            if targetPair and not responseGiven:&amp;#10;                addData('noResp', targetPair, absNumOfTrials, nrOfEntries) # Add data&amp;#10;                nrOfEntries += 1 # Keep track of number of entries in current trial&amp;#10;            switchTime = t # Start the clock&amp;#10;            targetPair = True # This will be set False after every response (also in the very beginning)&amp;#10;            frameCount = frameN # This will be used to check if wait time has exceeded&amp;#10;            responseGiven = False # To keep track if response was already recorded&amp;#10;        else: # If wait time is not over yet but random sampling gave a another pair of &amp;#10;            # targets then just change one of them randomly to non-target&amp;#10;            imList[cond[randint(0,1)]].image = nonTargetSet[randint(0,4)] # nonTargetSet == imageArray[0:4]&amp;#10;    shuffle(randImage) # Shuffle for the next round&amp;#10;&amp;#10;# Check keys&amp;#10;keys = kb.getKeys()&amp;#10;&amp;#10;if keys:&amp;#10;    if 'space' in keys[-1].name:&amp;#10;        if not targetPair:&amp;#10;            addData('false alarm', targetPair, absNumOfTrials, nrOfEntries)&amp;#10;#            addData('false alarm', targetPair) # , absNumOfTrials, nrOfEntries&amp;#10;        else:&amp;#10;            addData(t-switchTime, targetPair, absNumOfTrials, nrOfEntries)&amp;#10;        nrOfEntries += 1&amp;#10;        responseGiven = True&amp;#10;        targetPair = False&amp;#10;    elif 'escape' in keys[-1].name:&amp;#10;        core.quit()&amp;#10;&amp;#10;# Do not show the symbols if the presentation is over (response will be still recorded)&amp;#10;if t &gt; stimDur-waitRespTime and imList[0].opacity:&amp;#10;    for im in imList:&amp;#10;        im.opacity = 0&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;rects.draw();&amp;#10;if ((util.sum(opacities) &amp;&amp; ((frameConst - counter) &lt;= 1))) {&amp;#10;    opacities = [0, 0, 0, 0];&amp;#10;    counter = 0;&amp;#10;} else {&amp;#10;    counter += 1;&amp;#10;}&amp;#10;frameNow = (startFrame + frameN);&amp;#10;opacities = checkOpaStatus(opacities, flipAfterEvery, frameNow);&amp;#10;if ((t &lt;= (stimDur - waitRespTime))) {&amp;#10;    rects.opacities = opacities;&amp;#10;} else {&amp;#10;    rects.opacities = 1;&amp;#10;}&amp;#10;if (((frameN % symShowFrames) === 0)) {&amp;#10;    imCount = 0;&amp;#10;    for (var im, _pj_c = 0, _pj_a = imList, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        im = _pj_a[_pj_c];&amp;#10;        im.image = imageArray[randImage[imCount]];&amp;#10;        imCount += 1;&amp;#10;    }&amp;#10;    if ((_pj.in_es6(&quot;target&quot;, imageArray[randImage[cond[0]]]) &amp;&amp; _pj.in_es6(&quot;target&quot;, imageArray[randImage[cond[1]]]))) {&amp;#10;        if ((((frameN - frameCount) &gt;= waitNextPairFrames) || (! nrOfEntries))) {&amp;#10;            if ((targetPair &amp;&amp; (! responseGiven))) {&amp;#10;                addData(&quot;noResp&quot;, targetPair, absNumOfTrials, nrOfEntries);&amp;#10;                nrOfEntries += 1;&amp;#10;            }&amp;#10;            switchTime = t;&amp;#10;            targetPair = true;&amp;#10;            frameCount = frameN;&amp;#10;            responseGiven = false;&amp;#10;        } else {&amp;#10;            imList[cond[util.randint(0, 1)]].image = nonTargetSet[util.randint(0, 4)];&amp;#10;        }&amp;#10;    }&amp;#10;    util.shuffle(randImage);&amp;#10;}&amp;#10;keys = kb.getKeys();&amp;#10;if (keys) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys.slice((- 1))[0].name)) {&amp;#10;        if ((! targetPair)) {&amp;#10;            addData(&quot;false alarm&quot;, targetPair, absNumOfTrials, nrOfEntries);&amp;#10;        } else {&amp;#10;            addData((t - switchTime), targetPair, absNumOfTrials, nrOfEntries);&amp;#10;        }&amp;#10;        nrOfEntries += 1;&amp;#10;        responseGiven = true;&amp;#10;        targetPair = false;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;escape&quot;, keys.slice((- 1))[0].name)) {&amp;#10;            core.quit();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (((t &gt; (stimDur - waitRespTime)) &amp;&amp; imList[0].opacity)) {&amp;#10;    for (var im, _pj_c = 0, _pj_a = imList, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        im = _pj_a[_pj_c];&amp;#10;        im.opacity = 0;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="presentStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_a">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="4.1" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$imageArray[randImage[0]]" valType="file" updates="set during: iti.ISI" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_a" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="xys[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="symbolSize" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$stimDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="32" valType="num" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_b">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="4.1" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$imageArray[randImage[1]]" valType="file" updates="set during: iti.ISI" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_b" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="xys[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="symbolSize" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$stimDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="32" valType="num" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_c">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="4.1" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$imageArray[randImage[2]]" valType="file" updates="set during: iti.ISI" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_c" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="xys[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="symbolSize" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$stimDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="32" valType="num" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_d">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="4.1" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$imageArray[randImage[3]]" valType="file" updates="set during: iti.ISI" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_d" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="xys[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="symbolSize" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$stimDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="32" valType="num" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="fix_trial">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="4.1" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fix_trial" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$stimDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="intro">
      <CodeComponent name="define_vars">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Multiplier that scales the presentation times if the refresh rate is not 60&amp;#10;frameConst = int(expInfo['refreshRate'])/60 &amp;#10;&amp;#10;# This is to sync at 533.3(3) ms after the start of the presentation&amp;#10;startFrame = 390 * frameConst &amp;#10;&amp;#10;# Waiting response after each presentation for that amount of time &amp;#10;# Meaning that the &quot;blank period&quot; is this + whatever gets defined in iti routine&amp;#10;waitRespTime = 1 &amp;#10;&amp;#10;# NB! Actual stimulus duration is stimDur - waitRespTime &amp;#10;stimDur = 3.1 + waitRespTime # stimDur = 4.1 # (e.g. 186 + 60 frames with 60 Hz)&amp;#10;&amp;#10;k = 0.8 # Just a scaler for rescaling the sizes &amp;#10;boxSize = (2.5, 3.2)&amp;#10;symbolSize = (2.5*k, 3.2*k) # Should scale down compared to boxes (if tranparent)?&amp;#10;&amp;#10;# Distance from centre to the edge of the stimuli in deg&amp;#10;ecc = [5.25, 10.25] # x (4 or 9) + (width of the stimulus (2.5 deg) / 2)&amp;#10;# List of box positions &amp;#10;xys = [(ecc[1]*-1,0), (ecc[0]*-1,0),(ecc[0],0), (ecc[1],0)] &amp;#10;&amp;#10;# Array of place holder boxes to be presented on screen&amp;#10;rects = visual.ElementArrayStim(win, name = 'rects', units='deg', &amp;#10;fieldPos=(0.0, 0.0), fieldSize=(3, 4), fieldShape='square', &amp;#10;nElements=4, sizes= boxSize, xys=xys, &amp;#10;colors=([1.0, 1.0, 1.0]) , colorSpace='rgb', opacities=1, oris=0, &amp;#10;sfs=0, contrs=[1, 1,1,1], phases=0, elementTex='sqr',&amp;#10;elementMask=None, texRes=48, interpolate=True, &amp;#10;autoLog=None, maskParams=None)&amp;#10;&amp;#10;# Make a keyboard object&amp;#10;kb = keyboard.Keyboard()&amp;#10;&amp;#10;# List of images used&amp;#10;imageArray = ['stimuli/rect_ur.png','stimuli/rect_dr.png','stimuli/rect_dl.png','stimuli/rect_ul.png','stimuli/rect_target.png']&amp;#10;#imageArray = ['stimuli/rect_ur.jpg','stimuli/rect_dr.jpg','stimuli/rect_dl.jpg','stimuli/rect_ul.jpg','stimuli/rect_target.jpg']&amp;#10;&amp;#10;# 4x as many target stimuli in the set should give &amp;#10;# (random sampling without replacement) aprox. 70% trials with 1-3 target pairs&amp;#10;randImage = [0,1,2,3,4,4,4,4] # Each number represents a symbol (4 == target)&amp;#10;shuffle(randImage) # Shuffle the pool for the first round&amp;#10;# A set with no targets (to replace targets if minimum interval of 905 ms have not eceeded after presenting the last target pair)&amp;#10;nonTargetSet = imageArray[0:4] &amp;#10;# This helps with data entries (see the code component in the trial routine)&amp;#10;def addData(rt, isPair, trials, nrOfEntries):&amp;#10;    if nrOfEntries &gt; 0:&amp;#10;        thisExp.nextEntry()&amp;#10;    thisExp.addData('hand', hands[blocks.thisRepN])&amp;#10;    thisExp.addData('RT', rt) &amp;#10;    thisExp.addData('targetPair', isPair)&amp;#10;    thisExp.addData('absNumOfTrials', trials)&amp;#10;&amp;#10;# Flip after that many frames (on 60 hz monitor)&amp;#10;flipAfterOriginal = [4, 7, 3, 5]&amp;#10;# Multiply with the scaler&amp;#10;flipAfterEvery = [element * frameConst for element in flipAfterOriginal] &amp;#10;&amp;#10;# This checks if opacity of the box needs to be turned up (see the code component in the trial routine)&amp;#10;def checkOpaStatus(opas, flipAfterEvery, frameNow):&amp;#10;    for opai in range(0, len(opas)):&amp;#10;        if frameNow % flipAfterEvery[opai] == 0:&amp;#10;            opas[opai] = 1&amp;#10;    return opas&amp;#10;&amp;#10;# Change the symbol in that many frames&amp;#10;symShowFrames = 11*frameConst&amp;#10;&amp;#10;waitNextPairFrames = 54*frameConst # waitNextPairFrames = 54*frameConst # (aprox 900 ms, 905 in original)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="frameConst = (Number.parseInt(expInfo[&quot;refreshRate&quot;]) / 60);&amp;#10;startFrame = (390 * frameConst);&amp;#10;waitRespTime = 1;&amp;#10;stimDur = 4.1;&amp;#10;k = 0.8;&amp;#10;boxSize = [2.5, 3.2];&amp;#10;symbolSize = [(2.5 * k), (3.2 * k)];&amp;#10;ecc = [4, 9];&amp;#10;xys = [[(ecc[1] * (- 1)), 0], [(ecc[0] * (- 1)), 0], [ecc[0], 0], [ecc[1], 0]];&amp;#10;rects = new visual.ElementArrayStim(psychoJS.window, {&quot;name&quot;: &quot;rects&quot;, &quot;units&quot;: &quot;deg&quot;, &quot;fieldPos&quot;: [0.0, 0.0], &quot;fieldSize&quot;: [3, 4], &quot;fieldShape&quot;: &quot;square&quot;, &quot;nElements&quot;: 4, &quot;sizes&quot;: boxSize, &quot;xys&quot;: xys, &quot;colors&quot;: [1.0, 1.0, 1.0], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacities&quot;: 1, &quot;oris&quot;: 0, &quot;sfs&quot;: 0, &quot;contrs&quot;: [1, 1, 1, 1], &quot;phases&quot;: 0, &quot;elementTex&quot;: &quot;sqr&quot;, &quot;elementMask&quot;: null, &quot;texRes&quot;: 48, &quot;interpolate&quot;: true, &quot;autoLog&quot;: null, &quot;maskParams&quot;: null});&amp;#10;kb = new keyboard.Keyboard();&amp;#10;imageArray = [&quot;stimuli/rect_ur.png&quot;, &quot;stimuli/rect_dr.png&quot;, &quot;stimuli/rect_dl.png&quot;, &quot;stimuli/rect_ul.png&quot;, &quot;stimuli/rect_target.png&quot;];&amp;#10;randImage = [0, 1, 2, 3, 4, 4, 4, 4];&amp;#10;util.shuffle(randImage);&amp;#10;nonTargetSet = imageArray.slice(0, 4);&amp;#10;function addData(rt, isPair, trials, nrOfEntries) {&amp;#10;    if ((nrOfEntries &gt; 0)) {&amp;#10;        psychoJS.experiment.nextEntry();&amp;#10;    }&amp;#10;    psychoJS.experiment.addData(&quot;RT&quot;, rt);&amp;#10;    psychoJS.experiment.addData(&quot;targetPair&quot;, isPair);&amp;#10;    psychoJS.experiment.addData(&quot;absNumOfTrials&quot;, trials);&amp;#10;}&amp;#10;flipAfterOriginal = [4, 7, 3, 5];&amp;#10;flipAfterEvery = function () {&amp;#10;    var _pj_a = [], _pj_b = flipAfterOriginal;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var element = _pj_b[_pj_c];&amp;#10;        _pj_a.push((element * frameConst));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;function checkOpaStatus(opas, flipAfterEvery, frameNow) {&amp;#10;    for (var opai, _pj_c = 0, _pj_a = util.range(0, opas.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        opai = _pj_a[_pj_c];&amp;#10;        if (((frameNow % flipAfterEvery[opai]) === 0)) {&amp;#10;            opas[opai] = 1;&amp;#10;        }&amp;#10;    }&amp;#10;    return opas;&amp;#10;}&amp;#10;symShowFrames = (11 * frameConst);&amp;#10;waitNextPairFrames = (54 * frameConst);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_vars" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="iti">
      <CodeComponent name="iti_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="absNumOfTrials = 0 # Keeps track of the number of trials " valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="absNumOfTrials = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="rects.opacities = 1;&amp;#10;absNumOfTrials += 1;&amp;#10;psychoJS.experiment.addData(&quot;absNumOfTrials&quot;, absNumOfTrials);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="rects.opacities = 1 # Set the opacity back up for all the boxes &amp;#10;absNumOfTrials += 1 # Increase the trial counter by 1&amp;#10;thisExp.addData('absNumOfTrials', absNumOfTrials) # Send info about trial number to the data file&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="rects.draw() # Presents place holders (white boxes)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="rects.draw();&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="iti_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="fix_iti">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fix_iti" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <StaticComponent name="ISI">
        <Param val="" valType="code" updates="None" name="code"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ISI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.7" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
      </StaticComponent>
    </Routine>
    <Routine name="block_intro">
      <CodeComponent name="hands">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="hands = ['left', 'right']&amp;#10;shuffle(hands)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="hands = [&quot;left&quot;, &quot;right&quot;];&amp;#10;util.shuffle(hands);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="hands" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_block">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="2" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_block" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$attendCond + '\n\nWhich hand: ' + hands[blocks.thisRepN]" valType="str" updates="set every repeat" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="20" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_block_intro">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_block_intro" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="outro">
      <TextComponent name="outro_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="outro_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Experiment is over. Thank you for participating! " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="intro"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'attendCond': '1+2', 'pos2attLeft': 1, 'pos2attRight': 2}, {'attendCond': '1+3', 'pos2attLeft': 1, 'pos2attRight': 3}, {'attendCond': '3+4', 'pos2attLeft': 3, 'pos2attRight': 4}, {'attendCond': '2+4', 'pos2attLeft': 2, 'pos2attRight': 4}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="blocks.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="20" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="iti"/>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <LoopTerminator name="blocks"/>
    <Routine name="outro"/>
  </Flow>
</PsychoPy2experiment>
